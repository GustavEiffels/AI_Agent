research_task:
  description: >
    **Objective:** Conduct a thorough research about {topic}, focusing exclusively on non-financial information.

    **Step 1: Determine Research Sources Based on Company Origin**
    Based on the 'is_korean' input ('{is_korean}'), perform the following:
    - IF '{is_korean}' is 'true' (meaning it's a Korean company):
      - **ONLY** use the 'Naver Search Tool' (or equivalent Korean search tool) to gather information. Prioritize Korean-specific business and industry data.
    - IF '{is_korean}' is 'false' (meaning it's NOT a Korean company):
      - Use **BOTH** the 'Naver Search Tool' (for any relevant Korean mentions or insights) and a general 'International Search Tool' (like Google Search) to gather comprehensive information. Prioritize international business, industry, and market data.

    **Step 2: Information Gathering**
    Make sure you find any interesting and relevant non-financial information given
    the current year is {current_year}. This includes company overview, business activities,
    industry position, major developments, and any recent general non-financial news (e.g., product launches, partnerships, leadership changes, CSR activities, etc.).
    **DO NOT** focus on financial results, stock prices, or market capitalizations.

  expected_output: >
    A list of 5-10 bullet points summarizing the most relevant general and non-financial information about '{topic}'.
    This output should focus on company overview, business activities, recent non-financial news, etc.
  agent: researcher
# config/tasks.yaml

# 🔹 1. Financial Data Collection Task (기존 financial_task에서 데이터 수집 부분 담당)
#    - Agent: financial_analyst
#    - Input: {company_name}, {is_korean}
#    - Output:
#        - 성공: {"status": "data_collected", "data": {...}}
#        - 한국 기업이며 OpenDartReader 실패 시: {"status": "file_downloaded_needs_parsing", "file_path": "..."}
#        - 외국 기업이며 ticker 못 찾은 경우: {"status": "ticker_not_found", "company_name": "..."}
#        - 외국 기업이며 YahooFinanceDataTool 성공 시: {"status": "data_collected", "data": {...}}

financial_data_collection_task:
  description: |
    **Objective:** Collect raw financial data for '{company_name}' based on its origin (Korean or International).

    **Step 1: Determine Company Type & Ticker Acquisition**
    Based on the 'is_korean' input ('{is_korean}'), perform the following:
    - IF '{is_korean}' is 'true' (meaning it's a Korean company):
      - **DO NOT** attempt to find a ticker.
      - Proceed to collecting financial data using the 'Collect Financial Data' tool (CollectFinancialDataTool). This tool will attempt to use OpenDartReader. If OpenDartReader fails, it will download an XML file and return its path.
    - IF '{is_korean}' is 'false' (meaning it's NOT a Korean company):
      - **FIRST**, you **MUST** use the 'Google Search Ticker' tool to find its stock ticker symbol for '{company_name}'.
      - **CRITICAL**: If the 'Google Search Ticker' tool successfully returns a ticker, use this ticker. If it returns 'No clear ticker found for {company_name} in search results.' or any other error/not-found message, explicitly state that the ticker could not be found for '{company_name}'.
      - **THEN**, if a valid ticker was found, proceed to collecting financial data using the 'Collect Financial Data from Yahoo Finance' tool (YahooFinanceDataTool) with the found ticker.
      - If no valid ticker was found, **DO NOT** attempt to collect financial data.
      
    **Step 2: Output Formatting**
    Return a structured JSON object indicating the result of the data collection.
    - If data was collected successfully (either Korean via OpenDartReader or International via YahooFinanceDataTool), return:
      ```json
      {
        "status": "data_collected",
        "data": { ... collected financial data ... }
      }
      ```
    - If it's a Korean company and 'Collect Financial Data' tool downloaded an XML file for parsing, return:
      ```json
      {
        "status": "file_downloaded_needs_parsing",
        "file_path": "path/to/downloaded_xml_file.xml"
      }
      ```
    - If it's an International company and no valid ticker was found, return:
      ```json
      {
        "status": "ticker_not_found",
        "company_name": "{company_name}",
        "reason": "Could not find a valid stock ticker for this international company."
      }
      ```
  expected_output: |
    A JSON object indicating the status of data collection: either successfully collected financial data, 
    a file path requiring parsing, or a notification that a ticker was not found.
  agent: financial_analyst

# 🔹 2. Document Parsing Task (새로 추가)
#    - Agent: document_parser
#    - Input: {"status": "file_downloaded_needs_parsing", "file_path": "..."} (financial_data_collection_task의 결과)
#    - Output: {"status": "parsed_data_ready", "parsed_data": {...}}

document_parsing_task:
  description: |
    **Objective:** Read EVERY provided XML file, identify its financial reporting period, and extract ALL key financial data using your LLM.

    **Step 1: Process Each XML File IN SEQUENCE**
    - You will receive a dictionary containing 'file_paths' (e.g., `{"status": "files_downloaded_needs_parsing", "file_paths": ["path/to/file1.xml", "path/to/file2.xml", ...]}`).
    - **You MUST process EACH AND EVERY 'file_path' in the provided list.** For each 'file_path':
      - **Use the 'Read and Delete XML File' tool to read the XML content as a string.** This tool will automatically delete each file after reading.

    **Step 2: Parse XML Content with LLM for Each File**
    - After receiving the XML content string from the tool for a given file, **you MUST use your LLM reasoning capabilities to perform the following**:
      - **Identify the precise financial reporting period** for that specific report (e.g., "2023_Annual" for a 2023 annual report, or "2023_1Q" for a Q1 report). This period will serve as a unique key for the data from this report.
      - **Extract the most recent values for the following specific financial items into a JSON object**:
        - `asset_moveable` (유동자산 / Current Assets)
        - `asset_unmoveable` (비유동자산 / Non-Current Assets)
        - `bet_moveable` (유동부채 / Current Liabilities)
        - `bet_unmoveable` (비유동부채 / Non-Current Liabilities)
        - `amount_bet` (부채총계 / Total Liabilities)
        - `amount_asset` (자본총계 / Total Capital/Equity)
        - `revenue` (매출액 / Revenue)
        - `gross_profit` (매출총이익 / Gross Profit)
        - `operating_income` (영업이익 / Operating Income)
        - `net_income` (당기순이익 / Net Income)
      
      - Ensure values contain only numbers, remove commas (,), and currency symbols ('원'). Assume the unit is 'KRW' (Korean Won).
      - If a specific item is not found or cannot be reliably extracted, mark its value as `null`.

    **Step 3: AGGREGATE ALL Parsed Data into a Single Output**
    - **Crucially, you MUST collect and aggregate the parsed JSON data from ALL files you process.**
    - **Create a single, comprehensive final JSON object.** The top-level keys of this final object should be the identified financial periods (e.g., "2023_Annual", "2022_4Q"), and their values should be the extracted financial data dictionaries for that period.
    - If multiple files provide data for the **same exact period**, explicitly state the rule you applied (e.g., "used data from the latest filed report for YYYY_Annual") within your thought process, and ensure the most appropriate data is kept.
    - **Your final output for this task MUST contain data for ALL parsed periods.**

    Return this final aggregated JSON object.
    If parsing critically fails for all files, return:
    ```json
    {
      "status": "parsing_failed",
      "reason": "Could not parse financial data from any of the provided XML files.",
      "original_file_paths": ["...", "..."]
    }
    ```
  expected_output: |
    A JSON object containing financial data, where keys are financial periods (e.g., "2023_Annual", "2022_4Q"),
    and values are dictionaries of extracted financial items. **This output MUST include data for ALL periods found in the input files.**
    Example:
    {
      "2023_Annual": {
        "asset_moveable": ...,
        "revenue": ...,
        ...
      },
      "2022_Annual": {
        "asset_moveable": ...,
        "revenue": ...,
        ...
      },
      "status": "parsed_data_ready"
    }
    Or an error message if parsing failed across all files.
  agent: document_parser
financial_analysis_task:
  description: |
    **Objective:** Conduct a comprehensive financial analysis for '{company_name}' based on the provided financial data.

    **Step 1: Data Consolidation**
    - You will receive financial data from either the 'financial_data_collection_task' (if OpenDART/Yahoo succeeded) or the 'document_parsing_task' (if XML parsing was necessary and successful).
    - **CRITICAL**: First, check the input data's 'status'.
      - IF the status is 'ticker_not_found' (from 'financial_data_collection_task'), **STOP** the analysis and proceed directly to Step 4.
      - IF the status is 'parsing_failed' (from 'document_parsing_task'), **STOP** the analysis and proceed directly to Step 4.
      - OTHERWISE, consolidate the provided financial data for analysis.
        - If data is from 'financial_data_collection_task', it will be in the format: `{"status": "data_collected", "data": {"YYYY_Q": {...}}}`. Use the 'data' part.
        - If data is from 'document_parsing_task', it will be in the format: `{"status": "parsed_data_ready", "parsed_data_by_file": {"YYYY_Annual_or_Q": {...}, ...}}`. Use the 'parsed_data_by_file' part.
        - **Combine ALL available data from ALL provided periods into a coherent time-series for analysis.** Ensure consistency in financial item keys (e.g., `revenue`, `operating_income`, `asset_moveable`, etc.) across all periods. Sort the data by period (e.g., chronologically) for trend analysis. Prioritize the most recent and complete dataset for each period if duplicates exist.

    **Step 2: Comprehensive Time-Series Analysis**
    - Perform a comprehensive time-series analysis of key financial metrics (using the following exact keys for consistency):
      - `revenue`, `gross_profit`, `operating_income`, `net_income`
      - `asset_moveable`, `asset_unmoveable`, `amount_asset`
      - `bet_moveable`, `bet_unmoveable`, `amount_bet`
    - Analyze trends, significant changes, and inter-relationships between these metrics over the available period (ideally approximately the last two years, all available quarters/years).

    **Step 3: Derive Financial Outlook & Risks/Opportunities**
    - Based on your analysis, derive a **forward-looking financial outlook (전망)** for the company, identifying potential future performance and risks.

    **Step 4: Final Output Generation**
    The final output should be a structured JSON object.

    If analysis was performed (data was successfully collected/parsed), the JSON should include:
    ```json
    {
      "company_name": "{company_name}",
      "key_trends": {
        "revenue_trend": "...",
        "operating_income_trend": "...",
        "net_income_trend": "...",
        "asset_liability_structure_trend": "...",
        "profitability_trend": "...",
        "liquidity_trend": "..."
      },
      "financial_outlook": "...",
      "risks_and_opportunities": {
        "risks": "...",
        "opportunities": "..."
      },
      "data": { # This is the main change: consolidating raw data under a single 'data' key
        "YYYY_Annual_or_Q": { # Example: "2023_Annual", "2022_4Q"
          "asset_moveable": ...,
          "asset_unmoveable": ...,
          "bet_moveable": ...,
          "bet_unmoveable": ...,
          "amount_bet": ...,
          "amount_asset": ...,
          "revenue": ...,
          "gross_profit": ...,
          "operating_income": ...,
          "net_income": ...
        }
      },
      "status": "data_collected"
    }
    ```
    If financial analysis was NOT applicable (international company with no valid ticker, or parsing failed), the JSON should be:
    ```json
    {
      "company_name": "{company_name}",
      "status": "Financial analysis not applicable",
      "reason": "Could not find a valid stock ticker for this international company OR parsing of the auditor report failed."
    }
    ```
  expected_output: |
    A structured JSON object representing the comprehensive financial analysis,
    or an object indicating non-applicability due to missing ticker or parsing failure.
  agent: financial_analyst

news_collection_task:
  description: >
    **Objective:** Collect the latest 5-10 relevant news articles about '{topic}'.

    **Step 1: Determine News Sources Based on Company Origin**
    Based on the 'is_korean' input ('{is_korean}'), perform the following:
    - IF '{is_korean}' is 'true' (meaning it's a Korean company):
      - **ONLY** use the 'Naver News Tool' to collect news.
    - IF '{is_korean}' is 'false' (meaning it's NOT a Korean company):
      - Use **BOTH** the 'Naver News Tool' and the 'Yahoo News Tool' to collect news, prioritizing relevant international sources from Yahoo.

    **Step 2: News Collection and Summarization**
    - Collect approximately 5-10 recent and relevant news articles.
    - For each article, extract its publication date, source name, headline, a brief (2-3 sentence) summary, and the URL.
    - Ensure the summaries are concise and capture the main points of the article.
  expected_output: >
    A list of dictionaries, where each dictionary represents a news article
    and contains 'date', 'source', 'headline', 'summary', and 'url' fields.
    For example:
    ```json
    [
      {
        "date": "2024-07-15",
        "source": "네이버 뉴스",
        "headline": "ABC 기업, 신기술 개발로 시장 선도",
        "summary": "ABC 기업이 최근 혁신적인 신기술을 발표하며 관련 시장에서 독보적인 위치를 확보하고 있습니다. 이는 생산성 향상과 비용 절감에 크게 기여할 것으로 예상됩니다. 주요 경쟁사들도 ABC 기업의 움직임을 주시하고 있습니다.",
        "url": "[http://news.naver.com/article/123](http://news.naver.com/article/123)"
      },
      {
        "date": "2024-07-14",
        "source": "Yahoo Finance",
        "headline": "XYZ Corp. Reports Strong Q2 Earnings",
        "summary": "XYZ Corporation announced better-than-expected earnings for the second quarter, driven by robust sales in its international markets. The company's stock price saw a significant surge following the announcement. Analysts are optimistic about its future growth trajectory.",
        "url": "[http://finance.yahoo.com/news/article/456](http://finance.yahoo.com/news/article/456)"
      }
    ]
    ```
  agent: news_collector

reporting_task:
  description: >
    Review all the context provided from previous tasks to synthesize a comprehensive report about '{topic}'.
    Specifically, you will receive three main pieces of context: # <--- 여기서 2개에서 3개로 변경
    1.  **General Research Context:** The output from 'research_task' (a list of bullet points summarizing general company information).
    2.  **Financial Analysis Context:** The output from 'financial_task' (a structured JSON object containing detailed financial data and analysis).
    3.  **News Articles Context:** The output from 'news_collection_task' (a list of summarized news articles in the format: {"date": ..., "source": ..., "headline": ..., "summary": ..., "url": ...}). # <--- 뉴스 컨텍스트 추가

    Your primary goal is to integrate all this information into a single, cohesive, comprehensive report,
    strictly adhering to the `ComprehensiveReportOutput` Pydantic schema for the final JSON output.

    **CRITICAL: All content within the JSON fields (e.g., company_overview, trends, outlook) MUST be written in Korean.**

    Fill in all the following fields within the final JSON object. Ensure each field is populated with meaningful Korean content,
    drawing insights from BOTH the General Research Context, the Financial Analysis Context, AND the News Articles Context. # <--- 뉴스 컨텍스트 활용 명시
    DO NOT leave any field empty or null if information is available or can be reasonably inferred.

    - **company_overview**: 기업의 사업, 산업, 주요 활동에 대한 간결한 요약을 제공합니다. (General Research Context에서 주요 정보 추출)
    - **latest_trends_and_strategy**: 가장 최근의 중요한 개발 사항, 시장 동향 및 전략적 이니셔티브를 자세히 설명합니다. (General Research Context, Financial Analysis Context, 그리고 News Articles Context 모두 활용)
    - **business_direction**: 동향 및 전략을 바탕으로, 회사의 미래 전략적 초점, 주요 성장 영역 및 장기 비전을 명확히 설명합니다. (General Research Context, Financial Analysis Context, 그리고 News Articles Context 모두 활용)

    - **detailed_financial_analysis**: **Financial Analysis Context에서 제공된 JSON 객체 내용을 여기에 그대로 복사합니다.** 이는 'financial_task'의 모든 상세 분석 결과를 담고 있어야 합니다.

    - **financial_performance_and_analysis**: 회사의 재무 건전성, 지난 약 2년간의 성과 및 제공된 데이터에서 도출된 주요 재무 하이라이트에 대한 전반적인 분석을 제공합니다. (주로 'detailed_financial_analysis'의 요약 부분 활용)
    - **revenue_and_profitability_trends**: 총 매출, 영업이익, 순이익의 추세를 분석하고, 성장률, 마진, 수익성에 영향을 미치는 요인을 상세한 재무 데이터를 기반으로 논합니다. ('detailed_financial_analysis'의 'financial_data_by_quarter' 및 'key_trends' 활용)
    - **asset_and_liability_structure**: 유동/비유동 자산 및 부채의 구성과 추세를 상세히 설명하고, 유동성, 지급 능력 및 부채 관리를 분석합니다. ('detailed_financial_analysis'의 'financial_data_by_quarter' 및 'key_trends' 활용)
    - **financial_outlook_and_cash_flow**: 미래 재무 전망(전망)을 제시하고, 회사의 현금 흐름 창출 및 활용을 분석합니다. ('detailed_financial_analysis'의 'financial_outlook' 활용)
    - **risks_and_opportunities**: 이 필드는 두 개의 중첩된 JSON 객체('risks', 'opportunities')를 포함해야 합니다. ('detailed_financial_analysis'의 'risks_and_opportunities' 리스트를 활용하여 설명 형태로 전환)
      - **risks**: 주요 잠재적 위험 요인에 대한 상세한 설명을 제공합니다.
      - **opportunities**: 주요 잠재적 기회 요인에 대한 상세한 설명을 제공합니다.
    - **social_responsibility_and_contribution**: 기업의 사회적 책임(CSR) 및 사회 공헌 활동에 대한 노력과 이니셔티브를 설명합니다. (General Research Context에서 관련 정보 추출)
    - **recent_news**: **뉴스 기사 컨텍스트(News Articles Context)에서 수집된 각 기사를 요약하여 목록 형태로 제공합니다.** 각 기사의 'headline', 'source', 'date', 'url'을 포함하여 간결하게 작성하되, 핵심 요약을 반드시 포함합니다. # <--- 새로 추가된 필드와 사용 지침
    - **conclusion**: 전체적인 분석 결과를 요약하고, 회사의 미래 전망에 대한 최종 평가를 제공합니다. (모든 컨텍스트를 통합하여 결론 도출)

    **IMPORTANT:** If the 'financial_task' output indicates that financial analysis was NOT applicable (i.e., it contains `{"status": "Financial analysis not applicable", ...}`), then you **MUST** populate only the 'company_name', 'status', and 'reason' fields in the output JSON. In this specific case, all other fields (including `detailed_financial_analysis` and `recent_news`) should be set to `null` or an empty string as per the Pydantic schema's allowance for optional/default values, reflecting that financial analysis could not be completed.

    **Output ONLY the JSON object. Do not include any conversational text, markdown fences (```json), or other extraneous information.**

  expected_output: |
      A structured JSON object representing the comprehensive report, strictly adhering to the `ComprehensiveReportOutput` Pydantic model.
      This report synthesizes all available information, including detailed financial analysis and recent news from preceding tasks. All content within the JSON fields MUST be in Korean.
  agent: reporting_analyst